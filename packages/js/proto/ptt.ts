// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: proto/ptt.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "ptt";

export interface ParseRequest {
  torrent_titles: string[];
  normalize: boolean;
}

export interface ParseResponse {
  results: ParseResponse_Result[];
}

export interface ParseResponse_Result {
  audio: string[];
  bit_depth: string;
  channels: string[];
  codec: string;
  commentary: boolean;
  complete: boolean;
  container: string;
  convert: boolean;
  date: string;
  documentary: boolean;
  dubbed: boolean;
  edition: string;
  episode_code: string;
  episodes: number[];
  extended: boolean;
  extension: string;
  group: string;
  hdr: string[];
  hardcoded: boolean;
  languages: string[];
  network: string;
  proper: boolean;
  quality: string;
  release_types: string[];
  region: string;
  remastered: boolean;
  repack: boolean;
  resolution: string;
  retail: boolean;
  seasons: number[];
  site: string;
  size: string;
  subbed: boolean;
  three_d: string;
  title: string;
  uncensored: boolean;
  unrated: boolean;
  upscaled: boolean;
  volumes: number[];
  year: string;
  err: string;
}

export interface PingRequest {
  message: string;
}

export interface PingResponse {
  message: string;
}

function createBaseParseRequest(): ParseRequest {
  return { torrent_titles: [], normalize: false };
}

export const ParseRequest: MessageFns<ParseRequest> = {
  encode(message: ParseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.torrent_titles) {
      writer.uint32(10).string(v!);
    }
    if (message.normalize !== false) {
      writer.uint32(16).bool(message.normalize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.torrent_titles.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.normalize = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParseRequest {
    return {
      torrent_titles: globalThis.Array.isArray(object?.torrent_titles)
        ? object.torrent_titles.map((e: any) => globalThis.String(e))
        : [],
      normalize: isSet(object.normalize) ? globalThis.Boolean(object.normalize) : false,
    };
  },

  toJSON(message: ParseRequest): unknown {
    const obj: any = {};
    if (message.torrent_titles?.length) {
      obj.torrent_titles = message.torrent_titles;
    }
    if (message.normalize !== false) {
      obj.normalize = message.normalize;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParseRequest>, I>>(base?: I): ParseRequest {
    return ParseRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParseRequest>, I>>(object: I): ParseRequest {
    const message = createBaseParseRequest();
    message.torrent_titles = object.torrent_titles?.map((e) => e) || [];
    message.normalize = object.normalize ?? false;
    return message;
  },
};

function createBaseParseResponse(): ParseResponse {
  return { results: [] };
}

export const ParseResponse: MessageFns<ParseResponse> = {
  encode(message: ParseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.results) {
      ParseResponse_Result.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.results.push(ParseResponse_Result.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParseResponse {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => ParseResponse_Result.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ParseResponse): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => ParseResponse_Result.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParseResponse>, I>>(base?: I): ParseResponse {
    return ParseResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParseResponse>, I>>(object: I): ParseResponse {
    const message = createBaseParseResponse();
    message.results = object.results?.map((e) => ParseResponse_Result.fromPartial(e)) || [];
    return message;
  },
};

function createBaseParseResponse_Result(): ParseResponse_Result {
  return {
    audio: [],
    bit_depth: "",
    channels: [],
    codec: "",
    commentary: false,
    complete: false,
    container: "",
    convert: false,
    date: "",
    documentary: false,
    dubbed: false,
    edition: "",
    episode_code: "",
    episodes: [],
    extended: false,
    extension: "",
    group: "",
    hdr: [],
    hardcoded: false,
    languages: [],
    network: "",
    proper: false,
    quality: "",
    release_types: [],
    region: "",
    remastered: false,
    repack: false,
    resolution: "",
    retail: false,
    seasons: [],
    site: "",
    size: "",
    subbed: false,
    three_d: "",
    title: "",
    uncensored: false,
    unrated: false,
    upscaled: false,
    volumes: [],
    year: "",
    err: "",
  };
}

export const ParseResponse_Result: MessageFns<ParseResponse_Result> = {
  encode(message: ParseResponse_Result, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.audio) {
      writer.uint32(10).string(v!);
    }
    if (message.bit_depth !== "") {
      writer.uint32(18).string(message.bit_depth);
    }
    for (const v of message.channels) {
      writer.uint32(26).string(v!);
    }
    if (message.codec !== "") {
      writer.uint32(34).string(message.codec);
    }
    if (message.commentary !== false) {
      writer.uint32(40).bool(message.commentary);
    }
    if (message.complete !== false) {
      writer.uint32(48).bool(message.complete);
    }
    if (message.container !== "") {
      writer.uint32(58).string(message.container);
    }
    if (message.convert !== false) {
      writer.uint32(64).bool(message.convert);
    }
    if (message.date !== "") {
      writer.uint32(74).string(message.date);
    }
    if (message.documentary !== false) {
      writer.uint32(80).bool(message.documentary);
    }
    if (message.dubbed !== false) {
      writer.uint32(88).bool(message.dubbed);
    }
    if (message.edition !== "") {
      writer.uint32(98).string(message.edition);
    }
    if (message.episode_code !== "") {
      writer.uint32(106).string(message.episode_code);
    }
    writer.uint32(114).fork();
    for (const v of message.episodes) {
      writer.int32(v);
    }
    writer.join();
    if (message.extended !== false) {
      writer.uint32(120).bool(message.extended);
    }
    if (message.extension !== "") {
      writer.uint32(130).string(message.extension);
    }
    if (message.group !== "") {
      writer.uint32(138).string(message.group);
    }
    for (const v of message.hdr) {
      writer.uint32(146).string(v!);
    }
    if (message.hardcoded !== false) {
      writer.uint32(152).bool(message.hardcoded);
    }
    for (const v of message.languages) {
      writer.uint32(162).string(v!);
    }
    if (message.network !== "") {
      writer.uint32(170).string(message.network);
    }
    if (message.proper !== false) {
      writer.uint32(176).bool(message.proper);
    }
    if (message.quality !== "") {
      writer.uint32(186).string(message.quality);
    }
    for (const v of message.release_types) {
      writer.uint32(194).string(v!);
    }
    if (message.region !== "") {
      writer.uint32(202).string(message.region);
    }
    if (message.remastered !== false) {
      writer.uint32(208).bool(message.remastered);
    }
    if (message.repack !== false) {
      writer.uint32(216).bool(message.repack);
    }
    if (message.resolution !== "") {
      writer.uint32(226).string(message.resolution);
    }
    if (message.retail !== false) {
      writer.uint32(232).bool(message.retail);
    }
    writer.uint32(242).fork();
    for (const v of message.seasons) {
      writer.int32(v);
    }
    writer.join();
    if (message.site !== "") {
      writer.uint32(250).string(message.site);
    }
    if (message.size !== "") {
      writer.uint32(258).string(message.size);
    }
    if (message.subbed !== false) {
      writer.uint32(264).bool(message.subbed);
    }
    if (message.three_d !== "") {
      writer.uint32(274).string(message.three_d);
    }
    if (message.title !== "") {
      writer.uint32(282).string(message.title);
    }
    if (message.uncensored !== false) {
      writer.uint32(288).bool(message.uncensored);
    }
    if (message.unrated !== false) {
      writer.uint32(296).bool(message.unrated);
    }
    if (message.upscaled !== false) {
      writer.uint32(304).bool(message.upscaled);
    }
    writer.uint32(314).fork();
    for (const v of message.volumes) {
      writer.int32(v);
    }
    writer.join();
    if (message.year !== "") {
      writer.uint32(322).string(message.year);
    }
    if (message.err !== "") {
      writer.uint32(330).string(message.err);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParseResponse_Result {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParseResponse_Result();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.audio.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bit_depth = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.channels.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.codec = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.commentary = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.complete = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.container = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.convert = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.date = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.documentary = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.dubbed = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.edition = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.episode_code = reader.string();
          continue;
        }
        case 14: {
          if (tag === 112) {
            message.episodes.push(reader.int32());

            continue;
          }

          if (tag === 114) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.episodes.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.extended = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.extension = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.group = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.hdr.push(reader.string());
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.hardcoded = reader.bool();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.languages.push(reader.string());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.network = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.proper = reader.bool();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.quality = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.release_types.push(reader.string());
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.remastered = reader.bool();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.repack = reader.bool();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.resolution = reader.string();
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.retail = reader.bool();
          continue;
        }
        case 30: {
          if (tag === 240) {
            message.seasons.push(reader.int32());

            continue;
          }

          if (tag === 242) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.seasons.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 31: {
          if (tag !== 250) {
            break;
          }

          message.site = reader.string();
          continue;
        }
        case 32: {
          if (tag !== 258) {
            break;
          }

          message.size = reader.string();
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.subbed = reader.bool();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.three_d = reader.string();
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 36: {
          if (tag !== 288) {
            break;
          }

          message.uncensored = reader.bool();
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.unrated = reader.bool();
          continue;
        }
        case 38: {
          if (tag !== 304) {
            break;
          }

          message.upscaled = reader.bool();
          continue;
        }
        case 39: {
          if (tag === 312) {
            message.volumes.push(reader.int32());

            continue;
          }

          if (tag === 314) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.volumes.push(reader.int32());
            }

            continue;
          }

          break;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          message.year = reader.string();
          continue;
        }
        case 41: {
          if (tag !== 330) {
            break;
          }

          message.err = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParseResponse_Result {
    return {
      audio: globalThis.Array.isArray(object?.audio) ? object.audio.map((e: any) => globalThis.String(e)) : [],
      bit_depth: isSet(object.bit_depth) ? globalThis.String(object.bit_depth) : "",
      channels: globalThis.Array.isArray(object?.channels) ? object.channels.map((e: any) => globalThis.String(e)) : [],
      codec: isSet(object.codec) ? globalThis.String(object.codec) : "",
      commentary: isSet(object.commentary) ? globalThis.Boolean(object.commentary) : false,
      complete: isSet(object.complete) ? globalThis.Boolean(object.complete) : false,
      container: isSet(object.container) ? globalThis.String(object.container) : "",
      convert: isSet(object.convert) ? globalThis.Boolean(object.convert) : false,
      date: isSet(object.date) ? globalThis.String(object.date) : "",
      documentary: isSet(object.documentary) ? globalThis.Boolean(object.documentary) : false,
      dubbed: isSet(object.dubbed) ? globalThis.Boolean(object.dubbed) : false,
      edition: isSet(object.edition) ? globalThis.String(object.edition) : "",
      episode_code: isSet(object.episode_code) ? globalThis.String(object.episode_code) : "",
      episodes: globalThis.Array.isArray(object?.episodes) ? object.episodes.map((e: any) => globalThis.Number(e)) : [],
      extended: isSet(object.extended) ? globalThis.Boolean(object.extended) : false,
      extension: isSet(object.extension) ? globalThis.String(object.extension) : "",
      group: isSet(object.group) ? globalThis.String(object.group) : "",
      hdr: globalThis.Array.isArray(object?.hdr) ? object.hdr.map((e: any) => globalThis.String(e)) : [],
      hardcoded: isSet(object.hardcoded) ? globalThis.Boolean(object.hardcoded) : false,
      languages: globalThis.Array.isArray(object?.languages)
        ? object.languages.map((e: any) => globalThis.String(e))
        : [],
      network: isSet(object.network) ? globalThis.String(object.network) : "",
      proper: isSet(object.proper) ? globalThis.Boolean(object.proper) : false,
      quality: isSet(object.quality) ? globalThis.String(object.quality) : "",
      release_types: globalThis.Array.isArray(object?.release_types)
        ? object.release_types.map((e: any) => globalThis.String(e))
        : [],
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      remastered: isSet(object.remastered) ? globalThis.Boolean(object.remastered) : false,
      repack: isSet(object.repack) ? globalThis.Boolean(object.repack) : false,
      resolution: isSet(object.resolution) ? globalThis.String(object.resolution) : "",
      retail: isSet(object.retail) ? globalThis.Boolean(object.retail) : false,
      seasons: globalThis.Array.isArray(object?.seasons) ? object.seasons.map((e: any) => globalThis.Number(e)) : [],
      site: isSet(object.site) ? globalThis.String(object.site) : "",
      size: isSet(object.size) ? globalThis.String(object.size) : "",
      subbed: isSet(object.subbed) ? globalThis.Boolean(object.subbed) : false,
      three_d: isSet(object.three_d) ? globalThis.String(object.three_d) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      uncensored: isSet(object.uncensored) ? globalThis.Boolean(object.uncensored) : false,
      unrated: isSet(object.unrated) ? globalThis.Boolean(object.unrated) : false,
      upscaled: isSet(object.upscaled) ? globalThis.Boolean(object.upscaled) : false,
      volumes: globalThis.Array.isArray(object?.volumes) ? object.volumes.map((e: any) => globalThis.Number(e)) : [],
      year: isSet(object.year) ? globalThis.String(object.year) : "",
      err: isSet(object.err) ? globalThis.String(object.err) : "",
    };
  },

  toJSON(message: ParseResponse_Result): unknown {
    const obj: any = {};
    if (message.audio?.length) {
      obj.audio = message.audio;
    }
    if (message.bit_depth !== "") {
      obj.bit_depth = message.bit_depth;
    }
    if (message.channels?.length) {
      obj.channels = message.channels;
    }
    if (message.codec !== "") {
      obj.codec = message.codec;
    }
    if (message.commentary !== false) {
      obj.commentary = message.commentary;
    }
    if (message.complete !== false) {
      obj.complete = message.complete;
    }
    if (message.container !== "") {
      obj.container = message.container;
    }
    if (message.convert !== false) {
      obj.convert = message.convert;
    }
    if (message.date !== "") {
      obj.date = message.date;
    }
    if (message.documentary !== false) {
      obj.documentary = message.documentary;
    }
    if (message.dubbed !== false) {
      obj.dubbed = message.dubbed;
    }
    if (message.edition !== "") {
      obj.edition = message.edition;
    }
    if (message.episode_code !== "") {
      obj.episode_code = message.episode_code;
    }
    if (message.episodes?.length) {
      obj.episodes = message.episodes.map((e) => Math.round(e));
    }
    if (message.extended !== false) {
      obj.extended = message.extended;
    }
    if (message.extension !== "") {
      obj.extension = message.extension;
    }
    if (message.group !== "") {
      obj.group = message.group;
    }
    if (message.hdr?.length) {
      obj.hdr = message.hdr;
    }
    if (message.hardcoded !== false) {
      obj.hardcoded = message.hardcoded;
    }
    if (message.languages?.length) {
      obj.languages = message.languages;
    }
    if (message.network !== "") {
      obj.network = message.network;
    }
    if (message.proper !== false) {
      obj.proper = message.proper;
    }
    if (message.quality !== "") {
      obj.quality = message.quality;
    }
    if (message.release_types?.length) {
      obj.release_types = message.release_types;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.remastered !== false) {
      obj.remastered = message.remastered;
    }
    if (message.repack !== false) {
      obj.repack = message.repack;
    }
    if (message.resolution !== "") {
      obj.resolution = message.resolution;
    }
    if (message.retail !== false) {
      obj.retail = message.retail;
    }
    if (message.seasons?.length) {
      obj.seasons = message.seasons.map((e) => Math.round(e));
    }
    if (message.site !== "") {
      obj.site = message.site;
    }
    if (message.size !== "") {
      obj.size = message.size;
    }
    if (message.subbed !== false) {
      obj.subbed = message.subbed;
    }
    if (message.three_d !== "") {
      obj.three_d = message.three_d;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.uncensored !== false) {
      obj.uncensored = message.uncensored;
    }
    if (message.unrated !== false) {
      obj.unrated = message.unrated;
    }
    if (message.upscaled !== false) {
      obj.upscaled = message.upscaled;
    }
    if (message.volumes?.length) {
      obj.volumes = message.volumes.map((e) => Math.round(e));
    }
    if (message.year !== "") {
      obj.year = message.year;
    }
    if (message.err !== "") {
      obj.err = message.err;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParseResponse_Result>, I>>(base?: I): ParseResponse_Result {
    return ParseResponse_Result.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParseResponse_Result>, I>>(object: I): ParseResponse_Result {
    const message = createBaseParseResponse_Result();
    message.audio = object.audio?.map((e) => e) || [];
    message.bit_depth = object.bit_depth ?? "";
    message.channels = object.channels?.map((e) => e) || [];
    message.codec = object.codec ?? "";
    message.commentary = object.commentary ?? false;
    message.complete = object.complete ?? false;
    message.container = object.container ?? "";
    message.convert = object.convert ?? false;
    message.date = object.date ?? "";
    message.documentary = object.documentary ?? false;
    message.dubbed = object.dubbed ?? false;
    message.edition = object.edition ?? "";
    message.episode_code = object.episode_code ?? "";
    message.episodes = object.episodes?.map((e) => e) || [];
    message.extended = object.extended ?? false;
    message.extension = object.extension ?? "";
    message.group = object.group ?? "";
    message.hdr = object.hdr?.map((e) => e) || [];
    message.hardcoded = object.hardcoded ?? false;
    message.languages = object.languages?.map((e) => e) || [];
    message.network = object.network ?? "";
    message.proper = object.proper ?? false;
    message.quality = object.quality ?? "";
    message.release_types = object.release_types?.map((e) => e) || [];
    message.region = object.region ?? "";
    message.remastered = object.remastered ?? false;
    message.repack = object.repack ?? false;
    message.resolution = object.resolution ?? "";
    message.retail = object.retail ?? false;
    message.seasons = object.seasons?.map((e) => e) || [];
    message.site = object.site ?? "";
    message.size = object.size ?? "";
    message.subbed = object.subbed ?? false;
    message.three_d = object.three_d ?? "";
    message.title = object.title ?? "";
    message.uncensored = object.uncensored ?? false;
    message.unrated = object.unrated ?? false;
    message.upscaled = object.upscaled ?? false;
    message.volumes = object.volumes?.map((e) => e) || [];
    message.year = object.year ?? "";
    message.err = object.err ?? "";
    return message;
  },
};

function createBasePingRequest(): PingRequest {
  return { message: "" };
}

export const PingRequest: MessageFns<PingRequest> = {
  encode(message: PingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PingRequest {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: PingRequest): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PingRequest>, I>>(base?: I): PingRequest {
    return PingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PingRequest>, I>>(object: I): PingRequest {
    const message = createBasePingRequest();
    message.message = object.message ?? "";
    return message;
  },
};

function createBasePingResponse(): PingResponse {
  return { message: "" };
}

export const PingResponse: MessageFns<PingResponse> = {
  encode(message: PingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PingResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: PingResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PingResponse>, I>>(base?: I): PingResponse {
    return PingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PingResponse>, I>>(object: I): PingResponse {
    const message = createBasePingResponse();
    message.message = object.message ?? "";
    return message;
  },
};

export type ServiceService = typeof ServiceService;
export const ServiceService = {
  parse: {
    path: "/ptt.Service/Parse",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ParseRequest): Buffer => Buffer.from(ParseRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ParseRequest => ParseRequest.decode(value),
    responseSerialize: (value: ParseResponse): Buffer => Buffer.from(ParseResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ParseResponse => ParseResponse.decode(value),
  },
  ping: {
    path: "/ptt.Service/Ping",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PingRequest): Buffer => Buffer.from(PingRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): PingRequest => PingRequest.decode(value),
    responseSerialize: (value: PingResponse): Buffer => Buffer.from(PingResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): PingResponse => PingResponse.decode(value),
  },
} as const;

export interface ServiceServer extends UntypedServiceImplementation {
  parse: handleUnaryCall<ParseRequest, ParseResponse>;
  ping: handleUnaryCall<PingRequest, PingResponse>;
}

export interface ServiceClient extends Client {
  parse(
    request: ParseRequest,
    callback: (error: ServiceError | null, response: ParseResponse) => void,
  ): ClientUnaryCall;
  parse(
    request: ParseRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ParseResponse) => void,
  ): ClientUnaryCall;
  parse(
    request: ParseRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ParseResponse) => void,
  ): ClientUnaryCall;
  ping(request: PingRequest, callback: (error: ServiceError | null, response: PingResponse) => void): ClientUnaryCall;
  ping(
    request: PingRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PingResponse) => void,
  ): ClientUnaryCall;
  ping(
    request: PingRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PingResponse) => void,
  ): ClientUnaryCall;
}

export const ServiceClient = makeGenericClientConstructor(ServiceService, "ptt.Service") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ServiceClient;
  service: typeof ServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
